#include<iostream>
#include<string>
#include<vector>
#include<algorithm>
#include<queue>

#define endl "\n"

using namespace std;

bool visited[111111];
int N;
vector<int> vec[111111];
int result[111111];

void Input() {
	cin >> N;
	for (int i = 0; i < N - 1; i++) {
		int x, y;
		cin >> x >> y;
		vec[x].push_back(y);
		vec[y].push_back(x);
	}
	for (int i = 0; i < N; i++) { cin >> result[i]; }
	if (result[0] != 1) { cout << 0; exit(0); }
}

int level[111111];
queue<int> q;
int last;
int LEV = 1;

void BFS() {
	q.push(1);
	level[1] = LEV;
	while (q.size() != 0) {
		int x = q.front();
		visited[x] = true;
		q.pop();
		for (int i = 0; i < vec[x].size(); i++) {
			if (visited[vec[x][i]] == false) {
				visited[vec[x][i]] = true;
				q.push(vec[x][i]);
				last = vec[x][i];
				level[vec[x][i]] = level[x] + 1;
			}
		}
	}
	/*for (int i = 1; i <= N; i++) {
		cout << level[i] << " ";
	}cout << endl;*/

	for (int i = 1; i < N; i++) {
		if (level[result[i]] < level[result[i - 1]]) {
			cout << 0;
			return;
		}
	}
	cout << 1; 

}


void Solution() {

	BFS();
}

void Solve() {
	Input();
	Solution();
}

int main(void) {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	Solve();

	return 0;
}
